#include <iostream>
#include <fstream>
#include <string>
#if __cplusplus >= 201703L
#include <filesystem>
namespace fs = std::filesystem;
#else
#include <direct.h>
#endif

using namespace std;

bool isValidFilename(const string& filename) {
    const string invalidChars = "<>:\\\"|?*";
    for (char c : invalidChars) {
        if (filename.find(c) != string::npos) return false;
    }
    return true;
}

std::string getCurrentDir() {
#if __cplusplus >= 201703L
    return fs::current_path().string();
#else
    char buff[FILENAME_MAX];
    _getcwd(buff, FILENAME_MAX);
    return std::string(buff);
#endif
}

void writeToFile(const string& filename) {
    if (filename.empty()) {
        cerr << "Filename is empty. Please provide a valid filename.\n";
        return;
    }
    if (!isValidFilename(filename)) {
        cerr << "Filename contains invalid characters. Please use a valid filename.\n";
        return;
    }
    ofstream outFile(filename); 
    if (!outFile) {
        cerr << "Error opening file for writing: " << filename << "\n";
        cerr << "Current working directory: " << getCurrentDir() << "\n";
        return;
    }

    string data;
    cout << "Enter data to write (end with a single line with 'END'):\n";
    while (true) {
        getline(cin, data);
        if (data == "END") break;
        outFile << data << '\n';
    }
    outFile.close();
    cout << "Data written successfully.\n";
}

void appendToFile(const string& filename) {
    if (filename.empty()) {
        cerr << "Filename is empty. Please provide a valid filename.\n";
        return;
    }
    if (!isValidFilename(filename)) {
        cerr << "Filename contains invalid characters. Please use a valid filename.\n";
        return;
    }
    ofstream outFile(filename, ios::app); 
    if (!outFile) {
        cerr << "Error opening file for appending: " << filename << "\n";
        cerr << "Current working directory: " << getCurrentDir() << "\n";
        return;
    }

    string data;
    cout << "Enter data to append (end with a single line with 'END'):\n";
    while (true) {
        getline(cin, data);
        if (data == "END") break;
        outFile << data << '\n';
    }
    outFile.close();
    cout << "Data appended successfully.\n";
}

void readFromFile(const string& filename) {
    if (filename.empty()) {
        cerr << "Filename is empty. Please provide a valid filename.\n";
        return;
    }
    if (!isValidFilename(filename)) {
        cerr << "Filename contains invalid characters. Please use a valid filename.\n";
        return;
    }
    ifstream inFile(filename);
    if (!inFile) {
        cerr << "Error opening file for reading: " << filename << "\n";
        cerr << "Current working directory: " << getCurrentDir() << "\n";
        return;
    }

    string line;
    cout << "File contents:\n";
    while (getline(inFile, line)) {
        cout << line << '\n';
    }
    inFile.close();
}

void copyFile(const string& src, const string& dest) {
    ifstream inFile(src, ios::binary);
    ofstream outFile(dest, ios::binary);
    if (!inFile || !outFile) {
        cerr << "Error copying file.\n";
        return;
    }
    outFile << inFile.rdbuf();
    cout << "File copied successfully.\n";
}

void deleteFile(const string& filename) {
    if (remove(filename.c_str()) == 0) {
        cout << "File deleted successfully.\n";
    } else {
        cerr << "Error deleting file.\n";
    }
}

int main() {
    string filename;
    int choice;

    cout << "Enter filename (e.g., data.txt): ";
    getline(cin, filename);
    if (filename.empty()) {
        filename = "data.txt";
        cout << "No filename entered. Using default: data.txt\n";
    }

    do {
        cout << "\nChoose an operation:\n";
        cout << "1. Write to file (overwrite)\n";
        cout << "2. Append to file\n";
        cout << "3. Read file\n";
        cout << "4. Copy file\n";
        cout << "5. Delete file\n";
        cout << "0. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;
        cin.ignore();  

        switch (choice) {
            case 1:
                writeToFile(filename);
                break;
            case 2:
                appendToFile(filename);
                break;
            case 3:
                readFromFile(filename);
                break;
            case 4: {
                string dest;
                cout << "Enter destination filename: ";
                getline(cin, dest);
                copyFile(filename, dest);
                break;
            }
            case 5:
                deleteFile(filename);
                break;
            case 0:
                cout << "Exiting program.\n";
                break;
            default:
                cout << "Invalid choice. Try again.\n";
        }
    } while (choice != 0);

    return 0;
}
